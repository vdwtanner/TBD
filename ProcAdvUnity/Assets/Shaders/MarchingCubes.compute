#pragma kernel CSMarchingCubes

struct Voxel{
	float3 pos;
	float health;
	int textureID;
};

struct VertexOut{
	float3 position;
	float3 normal;
	float4 color;
	float2 texCoords;
};

/*** INPUT BUFFERS ***/
// this structured buffer is actually a 3D array of voxels.
// where index [x][y][z] is [x + y*width + z*width*height]
StructuredBuffer<Voxel> chunkBuffer;
StructuredBuffer<int> edgeTable;
StructuredBuffer<int> triTable;
int width, height, depth;

/*** OUTPUT BUFFERS ***/
RWStructuredBuffer<VertexOut> vertBuffer;


[numthreads(8,8,8)]
void CSMarchingCubes (uint3 id : SV_DispatchThreadID)
{
	int x = id.x;
	int y = id.y;
	int z = id.z;

	if(x == width-1 || y == height-1 || z == depth-1) return;

	// get the voxels inside the cube looking at.
	Voxel v0 = chunkBuffer[x + y*width + z*width*height];
	Voxel v1 = chunkBuffer[(x+1) + y*width + z*width*height];
	Voxel v2 = chunkBuffer[(x+1) + (y+1)*width + z*width*height];
	Voxel v3 = chunkBuffer[x + (y+1)*width + z*width*height];
	Voxel v4 = chunkBuffer[x + y*width + (z+1)*width*height];
	Voxel v5 = chunkBuffer[(x+1) + y*width + (z+1)*width*height];
	Voxel v6 = chunkBuffer[(x+1) + (y+1)*width + (z+1)*width*height];
	Voxel v7 = chunkBuffer[x + (y+1)*width + (z+1)*width*height];

	// first we have to determine which vertices are inside
	// the surface we are estimating.
	int cubeIndex = 0;
	
	// if the health of the vertex if greater than or equal to 1,
	// step returns 1, otherwise 0.
	int b0 = step(1, v0.health);
	cubeIndex |= 1 * b0;
	int b1 = step(1, v1.health);
	cubeIndex |= 2 * b1;
	int b2 = step(1, v2.health);
	cubeIndex |= 4 * b2;
	int b3 = step(1, v3.health);
	cubeIndex |= 8 * b3;
	int b4 = step(1, v4.health);
	cubeIndex |= 16 * b4;
	int b5 = step(1, v5.health);
	cubeIndex |= 32 * b5;
	int b6 = step(1, v6.health);
	cubeIndex |= 64 * b6;
	int b7 = step(1, v7.health);
	cubeIndex |= 128 * b7;

	if(edgeTable[cubeIndex] == 0) return;

	float3 verts[12];

	// memory is a precious commodity, so lets reuse those branch variables.
	b0 = step(1, edgeTable[cubeIndex] & 1);
	verts[0] = lerp(v0.pos, v1.pos, 0.5f);
	b1 = step(1, edgeTable[cubeIndex] & 2);
	verts[1] = lerp(v1.pos, v2.pos, 0.5f);
	b2 = step(1, edgeTable[cubeIndex] & 4);
	verts[2] = lerp(v2.pos, v3.pos, 0.5f);
	b3 = step(1, edgeTable[cubeIndex] & 8);
	verts[3] = lerp(v3.pos, v0.pos, 0.5f);
	b4 = step(1, edgeTable[cubeIndex] & 16);
	verts[4] = lerp(v4.pos, v5.pos, 0.5f);
	b5 = step(1, edgeTable[cubeIndex] & 32);
	verts[5] = lerp(v5.pos, v6.pos, 0.5f);
	b6 = step(1, edgeTable[cubeIndex] & 64);
	verts[6] = lerp(v6.pos, v7.pos, 0.5f);
	b7 = step(1, edgeTable[cubeIndex] & 128);
	verts[7] = lerp(v7.pos, v4.pos, 0.5f);
	int b8 = step(1, edgeTable[cubeIndex] & 256);
	verts[8] = lerp(v4.pos, v0.pos, 0.5f);
	int b9 = step(1, edgeTable[cubeIndex] & 512);
	verts[9] = lerp(v5.pos, v1.pos, 0.5f);
	int b10 = step(1, edgeTable[cubeIndex] & 1024);
	verts[10] = lerp(v6.pos, v2.pos, 0.5f);
	int b11 = step(1, edgeTable[cubeIndex] & 2048);
	verts[11] = lerp(v7.pos, v3.pos, 0.5f);

	for(int i = 0; triTable[cubeIndex*16 + i] != -1; i+=3){

		VertexOut vert0;
		vert0.position = verts[triTable[cubeIndex*16 + i]];
		vert0.color = float4(0.0f, 0.0f, 1.0f, 1.0f);
		vert0.texCoords = float2(0.0f, 0.0f);

		VertexOut vert1;
		vert1.position = verts[triTable[cubeIndex*16 + i+1]];
		vert1.color = float4(0.0f, 0.0f, 1.0f, 1.0f);
		vert1.texCoords = float2(0.0f, 0.0f);

		VertexOut vert2;
		vert2.position = verts[triTable[cubeIndex*16 + i+2]];
		vert2.color = float4(0.0f, 0.0f, 1.0f, 1.0f);
		vert2.texCoords = float2(0.0f, 0.0f);

		float3 u = vert1.position - vert0.position;
		float3 v = vert2.position - vert0.position;

		float3 norm = -normalize(cross(u, v));

		vert0.normal = norm;
		vert1.normal = norm;
		vert2.normal = norm;

		vertBuffer[(x + y*width + z*width*height)*15 + i] = vert2;
		vertBuffer[(x + y*width + z*width*height)*15 + i+1] = vert1;
		vertBuffer[(x + y*width + z*width*height)*15 + i+2] = vert0;
	}

}